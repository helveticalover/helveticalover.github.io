<!DOCTYPE html>
<html lang="en">
	<head>
		<title>three.js webgl - animation - keyframes</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
		<style>
			body {
				background-color: #bfe3dd;
				color: #000;
			}
		</style>
	</head>

	<body>
		<div id="container"></div>
		<script async src="https://unpkg.com/es-module-shims@1.3.6/dist/es-module-shims.js"></script>

        <script type="importmap">
        {
            "imports": {
                "three": "https://cdn.skypack.dev/three@0.132.2",
                "three/addons/": "https://cdn.skypack.dev/three@0.132.2/examples/jsm/"
            }
        }
        </script>

		<script type="module">

			import * as THREE from 'three';

			import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
			import { RoomEnvironment } from 'three/addons/environments/RoomEnvironment.js';

			import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';
			import { DRACOLoader } from 'three/addons/loaders/DRACOLoader.js';

			const container = document.getElementById( 'container' );
			const renderer = new THREE.WebGLRenderer( { antialias: true } );
			renderer.setPixelRatio( window.devicePixelRatio );
			renderer.setSize( window.innerWidth, window.innerHeight );
			renderer.outputEncoding = THREE.sRGBEncoding;
			container.appendChild( renderer.domElement );

			const pmremGenerator = new THREE.PMREMGenerator( renderer );

			const scene = new THREE.Scene();
			scene.background = new THREE.Color( 0xbfe3dd );
			scene.environment = pmremGenerator.fromScene( new RoomEnvironment(), 0.04 ).texture;

			const camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );
			camera.position.set(4.52927830125589, 5.374440438060265, 2.0956965869802344);

			const controls = new OrbitControls( camera, renderer.domElement );
			controls.target.set(-2.531016179359267, -3.0033031310885487, 1.9465235753145764);
			controls.update();
			controls.autoRotate = true;
			controls.autoRotateSpeed = 0.5;
			controls.enablePan = true;
			controls.enableDamping = true;

			const dracoLoader = new DRACOLoader();
			dracoLoader.setDecoderPath( 'jsm/libs/draco/gltf/' );

			const loader = new GLTFLoader();
			loader.load( '{{ '/static/3d/building-tiles.glb' | url }}', function ( gltf ) {

				const model = gltf.scene;
				model.position.set( 0, 0, 0);
				model.scale.set( 1, 1, 1);
				scene.add( model );

				animate();

			}, undefined, function ( e ) {
				console.error( e );
			} );

			camera.position.z = 2;
			window.onresize = function () {
				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();

				renderer.setSize( window.innerWidth, window.innerHeight );
			};


			function animate() {
				requestAnimationFrame( animate );

				controls.update();

				renderer.render( scene, camera );
			}
		</script>
	</body>
</html>